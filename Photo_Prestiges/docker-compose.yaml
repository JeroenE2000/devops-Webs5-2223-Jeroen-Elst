version: '3.9'
services:
  # mongodb
  mongodb:
    image: mongo:latest
    restart: always
    env_file: ./.env
    ports:
      - 12347:27017
    expose:
      - 27017
    networks: 
      - my-network
    
  db-exporter:
    image: bitnami/mongodb-exporter:0.11
    environment:
      - MONGODB_URI=mongodb://mongodb:27017
    restart: always
    ports: 
      - 9216:9216
    networks: 
      - my-network

  #Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    depends_on:
      - mongodb
      - rabbitmq
      - api-gateway
      - authenticationservice
      - externalservice
      - scoreservice
      - targetservice
    command: --web.enable-lifecycle --config.file=/etc/prometheus/prometheus.yml
    networks: 
      - my-network

  #Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - 3000:3000
    volumes:
      - ./grafana:/var/lib/grafana
    depends_on:
      - prometheus
    networks: 
      - my-network

  #rabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    ports:
        - 15672:15672
        - 5672:5672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks: 
      - my-network


  # api-gateway    
  api-gateway:
    build: 
      context: ./Api_Gateway
      dockerfile: Dockerfile
    env_file: ./.env
    ports:
      - "${MICROSERVICE_BASE_PORT}:3016"
    environment:
      MICROSERVICE_BASE_PORT: ${MICROSERVICE_BASE_PORT}
      TARGET_SERVICE_URL: ${TARGET_SERVICE_URL}
      SCORE_SERVICE_URL: ${SCORE_SERVICE_URL}
      EXTERNAL_SERVICE_URL: ${EXTERNAL_SERVICE_URL}
      AUTHENTICATION_SERVICE_URL: ${AUTHENTICATION_SERVICE_URL}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - mongodb
    networks: 
      - my-network
  
  # microservice authentication-service
  authenticationservice:
    build: 
      context: ./AuthenticationService
      dockerfile: Dockerfile
    env_file: ./.env
    ports:
      - "${AUTHENTICATION_SERVICE_PORT}:3015"
    environment:
      AUTHENTICATION_SERVICE_PORT: ${AUTHENTICATION_SERVICE_PORT}
      AUTHENTICATIONSERVICE_DB_CONNECTION: ${AUTHENTICATIONSERVICE_DB_CONNECTION}
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks: 
      - my-network
  # microservice external-service
  externalservice:
    build: 
      context: ./ExterneService
      dockerfile: Dockerfile
    env_file: ./.env
    ports:
      - "${EXTERNAL_SERVICE_PORT}:3039"
    environment:
      EXTERNAL_SERVICE_PORT: ${EXTERNAL_SERVICE_PORT}
      EXTERNESERVICE_DB_CONNECTION: ${EXTERNESERVICE_DB_CONNECTION}
      OPAQUE_TOKEN: ${OPAQUE_TOKEN}
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks: 
      - my-network

  # microservice score-service
  scoreservice:
    build: 
      context: ./ScoreService
      dockerfile: Dockerfile
    env_file: ./.env
    ports:
      - "${SCORE_SERVICE_PORT}:3038"
    environment:
      SCORE_SERVICE_PORT: ${SCORE_SERVICE_PORT}
      SCORESERVICE_DB_CONNECTION: ${SCORESERVICE_DB_CONNECTION}
      OPAQUE_TOKEN: ${OPAQUE_TOKEN}
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks: 
      - my-network

  targetservice:
    build: 
      context: ./TargetService
      dockerfile: Dockerfile
    env_file: ./.env
    ports:
      - "${TARGET_SERVICE_PORT}:3012"
    environment:
      TARGET_SERVICE_PORT: ${TARGET_SERVICE_PORT}
      TARGETSERVICE_DB_CONNECTION: ${TARGETSERVICE_DB_CONNECTION}
      OPAQUE_TOKEN: ${OPAQUE_TOKEN}
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks: 
      - my-network

volumes:
  prometheus-data:

networks:
  my-network: