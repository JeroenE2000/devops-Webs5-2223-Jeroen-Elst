name: Node.js

on:
  push:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:latest
        env:
          AUTHENTICATION_DB: auth
          AUTHENTICATIONSERVICE_DB_CONNECTION: mongodb://mongodb:27017/auth
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --quiet --eval 'db.runCommand({ connectionStatus: 1 })'" 
          --health-interval 10s --health-timeout 5s --health-retries 3
        # Set the connection string to the MongoDB instance running as a container         
    
    defaults:
      run:
        working-directory: '.'

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: "package-lock.json"

    - run: npm ci --legacy-peer-deps
    - run: npm run build --if-present
    # Replace the "npm test" command with "docker-compose run app npm test" to run your tests against the MongoDB container
    - run: docker-compose run app npm test --coverage
    
    - name: Jest coverage report
      uses: ArtiomTr/jest-coverage-report-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: ESLinter
      run: npm run lint
      working-directory: .
